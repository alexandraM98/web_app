app.use(express.json());
app.use(cookieParser()); //used to store our user tokens for the session and also to determine whether they can access certain routes


app.use(
  session({
      secret: 'cat',
      resave: false,
      saveUninitialized: false,
      cookie: {
          httpOnly: true, //this cookie is going to be stored only in the server, not in the browser
          secure: false, //because I am using http and not https
          maxAge: 24 * 60 * 60 * 1000,
      },
  })
);

app.use(passport.initialize());
app.use(passport.session());
/**Google Auth starts here....
*/
const {OAuth2Client} = require('google-auth-library');
const CLIENT_ID = process.env.googleClientID;
const client = new OAuth2Client(CLIENT_ID);

function checkAuthenticated(req, res, next){

    let token = req.cookies['session-token'];

    let user = {};
    async function verify() {
        const ticket = await client.verifyIdToken({
            idToken: token,
            audience: CLIENT_ID,  // Specify the CLIENT_ID of the app that accesses the backend
        });
        const payload = ticket.getPayload();
        user.name = payload.name;
        user.email = payload.email;
        user.picture = payload.picture;
      }
      verify()
      .then(()=>{
          req.user = user;
          next();
      })
      .catch(err=>{
          res.redirect('/login')
      })

};


app.post('/login', (req,res)=>{
    let token = req.body['token'];
    async function verify() {
        const ticket = await client.verifyIdToken({
            idToken: token,
            audience: CLIENT_ID  // Specify the CLIENT_ID of the app that accesses the backend
        });
        const payload = ticket.getPayload();
        const userid = payload['sub'];
      }
      verify()
      .then(()=>{
          res.cookie('session-token', token);
          res.send('success')
      })
      .catch(console.error);

});

app.get('/patient', checkAuthenticated, (req, res)=>{
    let user = req.user;
    res.render('home/patient', {user});
});

/**Google Auth ends here....
*/


app.get('/logout', (req, res) => {
    res.clearCookie('session-token');
    req.session.destroy();
    res.redirect('/login');
});

app.get('/protectedRoute', checkAuthenticated, function(req, res) {
    res.render("home/protectedRoute");
});


/**GitHub Auth starts here....
*/



/**GitHub Auth ends here....
*/

const isAuth = (req, res, next) => {
    if (req.user) {
        next();
    }
    else {
        res.redirect("/login");
    }
};

 


/**Twitter Auth starts here....
*/

//import { twitterClientID, twitterClientSecret, twitterAccessToken, twitterTokenSecret } from "../SWA/security.js";

const apiKey = process.env.twitterClientID;
const apiSecretKey = process.env.twitterClientSecret;
const accessToken = process.env.twitterAccessToken;
const tokenSecret = process.env.twitterTokenSecret;

const TwitterStrategy = require('passport-twitter').Strategy;

passport.use(new TwitterStrategy({
    consumerKey: apiKey,
    consumerSecret: apiSecretKey,
    callbackURL: "http://localhost:3000/auth/twitter/callback"
  },
  function(token, tokenSecret, profile, cb) {
    /* User.findOrCreate({ twitterId: profile.id }, function (err, user) {
      return cb(err, user);
    }); */
    cb(null, profile);
  }
));

app.get('/auth/twitter',
  passport.authenticate('twitter'));

app.get('/auth/twitter/callback', 
  passport.authenticate('twitter', { failureRedirect: '/login' }),
  function(req, res) {
    // Successful authentication, redirect home.
    res.redirect('/researcher');
  });


  app.get('/researcher', isAuth, (req, res)=>{
    res.render('home/researcher');
});

/**Twitter Auth ends here....
*/
 

passport.serializeUser(function(user, cb) {
    cb(null, user.id);
});

passport.deserializeUser(function(id, cb) {
    cb(null, id);
});

